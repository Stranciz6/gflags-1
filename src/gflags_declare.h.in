// Copyright (c) 1999, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// ---
//
// Revamped and reorganized by Craig Silverstein
//
// This is the file that should be included by any file which declares
// command line flag.

#ifndef GFLAGS_DECLARE_H_
#define GFLAGS_DECLARE_H_

// ---------------------------------------------------------------------------
// Meta-information

// Version number of gflags library.
#define GFLAGS_VERSION_STRING "@PACKAGE_VERSION@"

#define GFLAGS_VERSION_MAJOR @PACKAGE_VERSION_MAJOR@ ///< Major version number.
#define GFLAGS_VERSION_MINOR @PACKAGE_VERSION_MINOR@ ///< Minor version number.
#define GFLAGS_VERSION_PATCH @PACKAGE_VERSION_PATCH@ ///< Version patch number.

// Whether gflags library is shared. Used for DLL import declaration.
#cmakedefine GFLAGS_SHARED_LIBS

// ---------------------------------------------------------------------------
// Namespace for gflags symbols.
#define GFLAGS_NAMESPACE @GFLAGS_NAMESPACE@

// ---------------------------------------------------------------------------
// Unused attribute declaration for GNU GCC.
#define GFLAGS_ATTRIBUTE_UNUSED @GFLAGS_ATTRIBUTE_UNUSED@

// ---------------------------------------------------------------------------
// Windows DLL import/export.
#ifndef GFLAGS_DLL_DECL
#  if defined(_MSC_VER) && defined(GFLAGS_SHARED_LIBS)
#    ifdef GFLAGS_DLL_EXPORT
#      define GFLAGS_DLL_DECL __declspec(dllexport)
#    else
#      define GFLAGS_DLL_DECL __declspec(dllimport)
#    endif
#  else
#    define GFLAGS_DLL_DECL
#  endif
#endif

// We always want to export defined variables, dll or no
#if defined(_MSC_VER)
#  define GFLAGS_DLL_DEFINE_FLAG __declspec(dllexport)
#else
#  define GFLAGS_DLL_DEFINE_FLAG
#endif

// We always want to import declared variables, dll or no
#if defined(_MSC_VER)
#  define GFLAGS_DLL_DECLARE_FLAG __declspec(dllimport)
#else
#  define GFLAGS_DLL_DECLARE_FLAG
#endif

// Export/import of STL class instantiations
// \sa http://support.microsoft.com/default.aspx?scid=KB;EN-US;168958
#if defined(GFLAGS_SHARED_LIBS) && defined(_MSC_VER) && _MSC_VER >= 1100
#  ifdef GFLAGS_DLL_EXPORT
#    define GFLAGS_EXTERN_STL
#  else
#    define GFLAGS_EXTERN_STL extern
#  endif
#endif

// ---------------------------------------------------------------------------
// Available system headers

// Define if you have the <stdint.h> header file.
#cmakedefine GFLAGS_HAVE_STDINT_H

// Define if you have the <sys/types.h> header file.
#cmakedefine GFLAGS_HAVE_SYS_TYPES_H

// Define if you have the <inttypes.h> header file.
#cmakedefine GFLAGS_HAVE_INTTYPES_H

// Define if you have the <sys/stat.h> header file.
#cmakedefine GFLAGS_HAVE_SYS_STAT_H

// Define if you have the <unistd.h> header file.
#cmakedefine GFLAGS_HAVE_UNISTD_H

// Define if you have the <fnmatch.h> header file.
#cmakedefine GFLAGS_HAVE_FNMATCH_H

// Define if you have the strtoll function.
#cmakedefine GFLAGS_HAVE_STRTOLL

// Define if you have the strtoq function.
#cmakedefine GFLAGS_HAVE_STRTOQ

// Define if you have the <pthread.h> header file.
#cmakedefine GFLAGS_HAVE_PTHREAD

// Backwards compatibility in case users defined these macros themselves
// or allow users to use these more general macros if the gflags library
// is build as part of a user project, e.g., included as Git submodule
#if defined(HAVE_STDINT_H) && !defined(GFLAGS_HAVE_STDINT_H)
#  define GFLAGS_HAVE_STDINT_H
#endif
#if defined(HAVE_SYS_TYPES_H) && !defined(GFLAGS_HAVE_SYS_TYPES_H)
#  define GFLAGS_HAVE_SYS_TYPES_H
#endif
#if defined(HAVE_INTTYPES_H)  && !defined(GFLAGS_HAVE_INTTYPES_H)
#  define GFLAGS_HAVE_INTTYPES_H
#endif
#if defined(HAVE_SYS_STAT_H)  && !defined(GFLAGS_HAVE_SYS_STAT_H)
#  define GFLAGS_HAVE_SYS_STAT_H
#endif
#if defined(HAVE_UNISTD_H)    && !defined(GFLAGS_HAVE_UNISTD_H)
#  define GFLAGS_HAVE_UNISTD_H
#endif
#if defined(HAVE_FNMATCH_H)   && !defined(GFLAGS_HAVE_FNMATCH_H)
#  define GFLAGS_HAVE_FNMATCH_H
#endif
#if defined(HAVE_STRTOLL)     && !defined(GFLAGS_HAVE_STRTOLL)
#  define GFLAGS_HAVE_STRTOLL
#endif
#if defined(HAVE_STRTOLQ)     && !defined(GFLAGS_HAVE_STRTOLQ)
#  define GFLAGS_HAVE_STRTOLQ
#endif
#if defined(HAVE_PTHREAD)     && !defined(GFLAGS_HAVE_PTHREAD)
#  define GFLAGS_HAVE_PTHREAD
#endif
#if defined(HAVE_RWLOCK)      && !defined(GFLAGS_HAVE_RWLOCK)
#  define GFLAGS_HAVE_RWLOCK
#endif

// gcc requires this to get PRId64, etc.
#if defined(GFLAGS_HAVE_INTTYPES_H) && !defined(__STDC_FORMAT_MACROS)
#  define __STDC_FORMAT_MACROS 1
#endif

// ---------------------------------------------------------------------------
// Flag types
#include <string>
#if defined(GFLAGS_HAVE_STDINT_H)
#  include <stdint.h>                   // the normal place uint32_t is defined
#elif defined(GFLAGS_HAVE_SYS_TYPES_H)
#  include <sys/types.h>                // the normal place u_int32_t is defined
#elif defined(GFLAGS_HAVE_INTTYPES_H)
#  include <inttypes.h>                 // a third place for uint32_t or u_int32_t
#endif

#cmakedefine GFLAGS_INTTYPES_FORMAT_C99
#cmakedefine GFLAGS_INTTYPES_FORMAT_BSD
#cmakedefine GFLAGS_INTTYPES_FORMAT_VC7

namespace GFLAGS_NAMESPACE {

#if   defined(GFLAGS_INTTYPES_FORMAT_C99)
typedef int32_t          int32;
typedef uint32_t         uint32;
typedef int64_t          int64;
typedef uint64_t         uint64;
#elif defined(GFLAGS_INTTYPES_FORMAT_BSD)
typedef int32_t          int32;
typedef u_int32_t        uint32;
typedef int64_t          int64;
typedef u_int64_t        uint64;
#elif defined(GFLAGS_INTTYPES_FORMAT_VC7) // Windows
typedef __int32          int32;
typedef unsigned __int32 uint32;
typedef __int64          int64;
typedef unsigned __int64 uint64;
#else
#  error Do not know how to define a 32-bit integer quantity on your system
#endif

} // namespace GFLAGS_NAMESPACE


namespace fLS {

// The meaning of "string" might be different between now and when the
// macros below get invoked (e.g., if someone is experimenting with
// other string implementations that get defined after this file is
// included).  Save the current meaning now and use it in the macros.
typedef std::string clstring;

} // namespace fLS


#define DECLARE_VARIABLE(type, shorttype, name) \
  /* We always want to import declared variables, dll or no */ \
  namespace fL##shorttype { extern GFLAGS_DLL_DECLARE_FLAG type FLAGS_##name; } \
  using fL##shorttype::FLAGS_##name

#define DECLARE_bool(name) \
  DECLARE_VARIABLE(bool, B, name)

#define DECLARE_int32(name) \
  DECLARE_VARIABLE(GFLAGS_NAMESPACE::int32, I, name)

#define DECLARE_int64(name) \
  DECLARE_VARIABLE(GFLAGS_NAMESPACE::int64, I64, name)

#define DECLARE_uint64(name) \
  DECLARE_VARIABLE(GFLAGS_NAMESPACE::uint64, U64, name)

#define DECLARE_double(name) \
  DECLARE_VARIABLE(double, D, name)

#define DECLARE_string(name) \
  /* We always want to import declared variables, dll or no */ \
  namespace fLS { \
  using ::fLS::clstring; \
  extern GFLAGS_DLL_DECLARE_FLAG ::fLS::clstring& FLAGS_##name; \
  } \
  using fLS::FLAGS_##name


#endif  // GFLAGS_DECLARE_H_
